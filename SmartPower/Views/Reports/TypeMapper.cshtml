@model List<SmartPower.Domin.report.SumEnergy>

@{
    ViewData["Title"] = "Energy Sum";
}


<script src="https://cdn.jsdelivr.net/npm/vue@2.6.0"></script>
<link href="~/assets/css/Loader.css" rel="stylesheet" />

<div class="container-fluid" id="app">
    <div class="row justify-content-center mb-1">
        <h2 class="text-center">
            Relation Mapping
        </h2>
    </div>
    <div class="row justify-content-center">
        <div class="col-4">
            <select v-model="sourceId" class="custom-select" v-on:change="AddTransformer">
                <option disabled selected>Select</option>
                <option v-for="source in sourcesCopy" :key="source.id" :value="source.id">
                    {{source.name}}
                </option>
            </select>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-4">
            <select :disabled="!sourceId" v-model="typeId" class="custom-select">
                <option disabled selected>Select</option>
                <option value="1">Transformer</option>
                <option value="2">Machine</option>
                <option value="3">SubMachine</option>
            </select>
        </div>
    </div>
    <div class="row justify-content-center">
        <button ref="LoadReportButton" class="btn btn-primary" v-on:click="Map()">  <div v-if="loader" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>  <span v-else>Submit</span></button>   
    </div>
   
</div>
<script>

</script>
<script>
    var app = new Vue({
        async mounted() {
            const response = await fetch('/reports/GetSources')
            const myjson = await response.json()
            this.sources = myjson.sources
            this.sourcesCopy = myjson.sources
        },
        el: '#app',

        data: {
            loader: false,
            sources: null,
            sourceId: null,
            machineId: null,
            typeId:null,
            submachineId:null,
            machines: [],
            sourcesCopy: null,
            submachines:[]

        },
        methods: {
            AddTransformer() {
                this.sourcesCopy = this.sources.filter(el => el.id != this.transformer)
               

            },
            AddMachine() {
                this.submachines = this.machines.filter(el => el.id != this.machineId)
                this.machines.push(this.machineId)
                console.log("selected: ",this.transformer);
            },
            AddSubMachine() {
                this.submachines.push(this.submachineId)
            },
            async Map() {
                try {
                    const response = await fetch('/reports/Map', {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body:  JSON.stringify({ SourceId: this.sourceId, TypeId: this.typeId})
                    })
                    const myjson = await response.json()
                    console.log(myjson)
                    this.sourcesCopy = this.sources.filter(el => el.id != this.sourceId)
                } catch (e) {
                    console.log(e)
                }
            }
        }
    })
</script>
<script>
</script>
<style>
    .node {
        width: 60px;
    }
</style>



